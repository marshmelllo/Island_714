<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bandit_ak</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> randomize();
global.mpgrid=mp_grid_create(0,0,room_width/32,room_height/32,32,32)//setting the grid for the pathfinding ai
mp_grid_add_instances(global.mpgrid,solid_par,true);
mp_grid_add_instances(global.mpgrid,obj_sandbags,true);
mypath=path_add();
legIn=0;
//gun[]=choose(banditWeapon.p90[],banditWeapon.ak[],banditWeapon.deagle[])
//mood="idol"
hp=100;
canShoot = true;
start=true;
spin=1
deadObj=bandit_dead
daze=false;
canTalk=true;
target=self;
image_speed=0
track=false;
/*
MOODS
patrol = following path
idol =  watching a spot while standing still
spotted = sees player
seen = saw player; goes to last place player was
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>track=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canTalk=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>daze=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(daze){speed=0}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///checking for player
if(player.dead=false){
if(banditCheck() = 1){

if(mood="idol"){
canShoot=false;
daze=true;
alarm[0]=15;
alarm[1]=15;
}
mood="spotted"
lastX=player.x
lastY=player.y
path_speed=0;
}
else if(mood="spotted"){mood="seen"; track=true; alarm[4]=15;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprites
sprite_index=gun[2];
var sped=abs(speed)+abs(path_speed);

if(abs(sped) &gt; 0){ legIn += (abs(sped)/12)}
else {legIn=0;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spotted
if(player.dead=false &amp;&amp; daze=false)

if (mood = "spotted")
{
turn=12;
image_angle += median(-turn, turn, ((((point_direction(x,y,target.x,target.y) - image_angle) mod 360) + 540) mod 360) - 180);
    var isSee=0;
    for(var d = -5; d&lt;5; d++;){
     if(collision_line(x,y,x+lengthdir_x(2000,image_angle+d),y+lengthdir_y(2000,image_angle+d),player,1,0)){
     isSee=1;
     break;
     }
    }
   if(isSee=1)
    if (canShoot = true){
    if(gun[0]=weapon_870p || gun[0]=weapon_spas12){
    for(var i = -gun[6]; i &lt; gun[6]; i+=2*gun[6]/5){
    fire=instance_create(x + lengthdir_x(gun[8]-10, image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8]-10, image_angle) + lengthdir_x(gun[9], image_angle),bullet);
    fire.image_angle=image_angle+i;
    flase=instance_create(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle),flash);
    glowe=instance_create(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle),glow);
        smoke=instance_create(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle),dust_hit_new);
    smoke.image_alpha=0.5
    fire.avoid=instance_nearest(x,y,bandit);
    flase.image_angle=other.image_angle// + random_range(-gun[6], +gun[6]);
    glowe.image_angle=other.image_angle// + random_range(-gun[6], +gun[6]);
    fire.direction=fire.image_angle;
    fire.speed=40;
    fire.damage=gun[5];
    fire.maker=image_angle;
    fire.collat=gun[10];
    }}
    else{
    
    fire=instance_create(x + lengthdir_x(gun[8]-10, image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8]-10, image_angle) + lengthdir_x(gun[9], image_angle),bullet);
    flase=instance_create(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle),flash);
    glowe=instance_create(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle),glow);
    smoke=instance_create(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle),dust_hit_new);
    smoke.image_alpha=0.5
    fire.image_angle=other.image_angle + random_range(-gun[6], +gun[6]);
    fire.avoid=instance_nearest(x,y,bandit);
    flase.image_angle=other.image_angle// + random_range(-gun[6], +gun[6]);
    glowe.image_angle=other.image_angle// + random_range(-gun[6], +gun[6]);
    fire.direction=fire.image_angle;
    fire.speed=40;
    fire.damage=gun[5];
    fire.maker=image_angle;
    fire.collat=gun[10];
    }
    shel=instance_create(x + lengthdir_x(gun[8]-5, image_angle) - lengthdir_y(gun[9]-4, image_angle), y + lengthdir_y(gun[8]-8, image_angle) + lengthdir_x(gun[9]-4, image_angle),shell);
    var direc = point_direction(x,y,shel.x,shel.y)+random_range(-5,5)-90;
    shel.image_angle=direc
    shel.sprite_index=gun[1];
    audio_play_sound(gun[3],10,0);
    alarm[0] = gun[4];
    canShoot = false;
    image_index=1
    alarm[3]=3
    }  
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///seen
if(player.dead=false &amp;&amp; daze=false)
if(mood="seen"){
dx=floor(lastX/16)*16+8;
dy=floor(lastY/16)*16+8;

if !mp_grid_path(global.mpgrid,mypath,x,y,dx,dy,true) //This is debugging to make sure a path exists...
    {
    var i,x2,y2; //Temp variables...
    var x1=x;
    var y1=x;
    for (i=0; i&lt;path_get_number(mypath); i+=1) //This loops through all the path points...
        {
        x1=path_get_point_x(mypath,i); //These lines add the path points to temp variables
        y1=path_get_point_y(mypath,i); //to be checked later on...
        x2=path_get_point_x(mypath,i+1);
        y2=path_get_point_y(mypath,i+1);
        if collision_line(x1,y1,x2,y2,solid_par,false,true) //checks to see if there is a collision between adjacent path points...
            {
            dx=x1; //If there is a collision, it sets dx/y to the last "good" path point...
            dy=y1;
            break;
            }
        } 
    mp_grid_path(global.mpgrid,mypath,x,y,dx,dy,1); //This now re_creates the path with the "good" coords...
    path_start(mypath,3,0,1); //This starts the object moving on the path...
    }
else
    {
    mp_grid_path(global.mpgrid,mypath,x,y,dx,dy,1); //This now creates the path...
    path_start(mypath,3,0,1); //This starts the object moving on the path...
    }
if(collision_line(x,y,lastX,lastY,solid_par,1,1)){
turn=12;
image_angle += median(-turn, turn, ((((direction - image_angle) mod 360) + 540) mod 360) - 180);
}
else{
turn=12;
image_angle += median(-turn, turn, ((((point_direction(x,y,lastX,lastY) - image_angle) mod 360) + 540) mod 360) - 180);
}
    //Check to see if zombie is at position where last seen player
if(distance_to_point(lastX,lastY)&lt;5){
if(start){start=false}
mood="idol";
speed=0;
path_speed=0;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///idle
if(mood="idol"){
if(start=false){
if!(collision_point(x + lengthdir_x(gun[8], image_angle) - lengthdir_y(gun[9], image_angle), y + lengthdir_y(gun[8], image_angle) + lengthdir_x(gun[9], image_angle) ,solid_par, 1, 1)){
image_angle+=spin
}
else{spin*=-1; image_angle+=(spin*6)}
}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///other
if(hp&lt;=0){
player.streak++;
player.streakCount=240;
repeat(2){
instance_create(x,y,blood_drip);
}
instance_create(x,y,blood)
gun=instance_create(x,y,gun[0])
if(room=room1_2){gun.bullets+=12}
var direct = direction+180;
gun.image_angle=direct;
gun.image_angle=gun.direction;
gun.speed=5;
gun.friction=0.3

instance_destroy();
}
with(bullet){
if(avoid=player){
if(distance_to_object(self)&lt;10){
other.lastX=player.x
other.lastY=player.y
other.mood="seen";
}
}
}

if(daze){
speed=0;
path_speed=0
}
if(distance_to_object(instance_nearest(x,y,obj_door))&lt;25 &amp;&amp; abs(path_speed)&gt;1){
with(instance_nearest(x,y,obj_door)){if(open=false)doorOpen(self,-1)}
}
if(track){lastX=player.x; lastY=player.y;}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///patrol
if(mood="patrol"){
turn=12;
image_angle += median(-turn, turn, ((((direction - image_angle) mod 360) + 540) mod 360) - 180);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(other.image_index)&lt;5{
hp=0;
if(hp&lt;=0){
body=instance_create(x,y,deadObj);
body.image_angle=image_angle
repeat(3){
instance_create(x,y,blood_spray)
instance_create(x,y,blood_mist)
instance_create(x,y,blood_drip)
}
repeat 6{
ID=instance_create(x+lengthdir_x(20,direction),y+lengthdir_y(20,direction),hit_blood);
ID.image_angle=random(360)
with (ID)motion_set(image_angle+200-10+random(20),6+random(3));
}
repeat 2{
ID=instance_create(x+lengthdir_x(20,direction),y+lengthdir_y(20,direction),blood_drip);
ID.image_angle=random(360)
with (ID)motion_set(image_angle+200-10+random(20),2+random(2));
}
repeat 2{
ID2=instance_create(x+lengthdir_x(20,direction),y+lengthdir_y(20,direction),hit_splat);
ID2.image_angle=random(360)
with (ID2)motion_set(image_angle+200-10+random(20),2+random(1));
}
repeat 2{
ID2=instance_create(x+lengthdir_x(20,direction),y+lengthdir_y(20,direction),hit_splat2);
ID2.image_angle=random(360)
with (ID2)motion_set(image_angle+200-10+random(20),2+random(1));
}

}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x+6,y+6,1,1,image_angle,c_black,0.5)
draw_sprite_ext(spr_legs,legIn,x,y,1,1,image_angle,-1,1)
draw_self();
/*
for(var i = -55; i&lt;55; i++){
draw_line(x + lengthdir_x(0, image_angle) - lengthdir_y(gun[9], image_angle),y + lengthdir_y(0, image_angle) + lengthdir_x(gun[9], image_angle),x+lengthdir_x(2000,image_angle+i),y+lengthdir_y(2000, image_angle+i))
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>23,21</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
